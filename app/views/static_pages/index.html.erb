<article role="main">
  <section class="top">
    <hgroup class="welcome vertical">
      <h1>THIS IS SPRKY</h1>
      <h4 class="subheader">Online Chess&mdash;Ruby on Rails Style.</h4>
    </hgroup>
  </section>
  <section class="features">
    <div class="feature-container">
      <div class="feature-content">
        <h3>Handcrafted App</h3>
        <p>For the capstone of <a href="http://thefirehoseproject.com">The Firehose Project</a> we hand-crafted an open source chess application using <a href="http://rubyonrails.org/">Ruby on Rails</a>. With Test Driven Development (TDD) as our guide, we crafted every element of the application from the ground up. Committed to sharpening our Ruby chops, we collaborated on pull requests to refactor and refine our code. We kept the red-green-refactor cycle tight, and above all we kept on shipping.</div>
    </div>
  </section>
  <section class="code">
    <div class="code-container">
      <hgroup>
        <h3>CODE</h3>
        <h5 class="subheader">Some highlights of our craft</h5>
      </hgroup>
      <div class="code-box-container">
        <div class="code-example">
          <pre><code class="language-ruby">
        def attempt_move(params)
          Piece.transaction do
            return false unless moving_own_piece?
            fail ActiveRecord::Rollback unless move_to(params)
            fail ActiveRecord::Rollback if game.check?(color)

            # update current state of check, checkmate, etc.
            game.update_state(color)
          end
        end
          </code></pre>
          <div class="arrow"></div>
        </div>
        <div class="code-description">
          <h4>Attempting a Move</h4>
          <p>While many illegal moves are caught before writing to the database, some are not detected until after - a player moving into check for example. For cases such as these, Activerecord transactions were used to ensure that all database updates would rollback to the previous move.</p>
        </div>
      </div>
      <div class="code-box-container">
        <div class="code-example four">
          <pre><code class="language-ruby">
            def check?(color)
              king = pieces.find_by(type: 'King', color: color)
              opponents = pieces_remaining(!color)

              opponents.each do |piece|
                if piece.valid_move?(king.x_position, king.y_position)
                  @piece_causing_check = piece
                  return true
                end
              end
              false
            end

            def checkmate?(color)
              checked_king = pieces.find_by(type: 'King', color: color)

              return false unless check?(color)
              return false if checked_king.can_move_out_of_check?
              return false if @piece_causing_check.can_be_captured?
              return false if @piece_causing_check.can_be_blocked?(checked_king)

              true
            end
          </code></pre>
          <div class="arrow red"></div>
        </div>
        <div class="code-description red three">
          <h4>Check and Checkmate</h4>
          <p>An integral part of the chess game, check and checkmate gave us our biggest logic challenge. Through several iterations and a number of refactors we eventually landed on two elegant and simple methods.</p>
          <h5>Check</h5>
          <p>In order to determine check, we looped through all opponent's pieces to see if any piece can legally move to the king's position. The check method runs before and after a move transaction is completed. This ensures a player doesn't move themselves into check and also determines if the opponent is in check. </p>
          <h5>Checkmate</h5>
          <p>Once a player is in check we determined that there are three ways to get out of check. If any of those moves are possible, the game is not in a state of checkmate. We set up ActiveRecord transactions to examine two levels of moves without altering the database. This allowed us to simulate a move and then verify if a state of check exists after the move.</p>
        </div>
      </div>
      <div class="code-box-container">
        <div class="code-example">
          <pre><code class="language-javascript">
            function sendMove ($piece, $destination) {
              var piece = {
                id: $piece.data('piece-id'),
                x_position: $destination.data('x-position'),
                y_position: $destination.data('y-position')
              }

              if ( isPawnPromotion($piece, piece.y_position)) {
                openModal('#promo-modal', function(pieceType) {
                  piece.type = pieceType;
                  submitPieceUpdate(piece);
                });

              } else {
                submitPieceUpdate(piece);
              }
            }

            function selectPiece($piece) {
              var isPlayersTurn = $('#gameboard').data('your-turn');

              if (isPlayersTurn) {
                $piece.addClass('selected');
              }
            }
          </code></pre>
          <div class="arrow"></div>
        </div>
        <div class="code-description">
          <h4>Javascript</h4>
          <p>To reduce http requests we implemented some front-end logic which made extensive use of data attributes. This allowed us to create a seamless integration between our front-end and back-end logic and maintain a snappy user experience</p>
          <p>In order to select a piece, the code checks that there is a piece assigned to the square and that it's currently that player's turn.  Another javacript function determines a destination and triggers sendMove.</p>
          <p>The sendMove function sends an AJAX call to our PiecesController with an updated x and y position. Upon success the controller returns with the correct URL for an updated game board (games/:id) and the page is reloaded.</p>
          <p>One planned enhancement is to return an updated gameboard partial rather than trigger a full page reload.</p>
        </div>
      </div>
    </div>
  </section>
  <section class="tools">
    <div class="tool-container">
      <div class="tool-content">
        <hgroup>
          <h3>Tools</h3>
          <h5 class="subheader">In coding as in carpentry, the right tool for the job</h5>
        </hgroup>
        <dl class="tool-list">
          <div class="tool-item">
            <dt class="tool-title">Version Control:</dt>
            <dd class="tool-logo"><a href="https://github.com/sprky/sprky_chess"><%= image_tag 'github-logo.png' %></a></dd>
          </div>
          <div class="tool-item codeship">
            <dt class="tool-title">Continuous Integration:</dt>
            <dd class="tool-logo"><a href="https://codeship.com/projects"><%= image_tag 'codeship-logo.png' %></a></dd>
          </div>
          <div class="tool-item">
            <dt class="tool-title">Team Communication:</dt>
            <dd class="tool-logo"><a href="https://slack.com/"><%= image_tag 'slack-logo.png' %></a></dd>
          </div>
          <div class="tool-item">
            <dt class="tool-title">Project Management:</dt>
            <dd class="tool-logo"><a href="https://trello.com/"><%= image_tag 'trello-logo.png' %> </a></dd>
          </div>
          <div class="tool-item">
            <dt class="tool-title">Code Analyzer:</dt>
            <dd class="tool-logo"><a href="https://github.com/bbatsov/rubocop"><%= image_tag 'rubocop-logo.png' %></a></dd>
          </div>
        </dl>
      </div>
    </div>
  </section>
  <section class="team">
    <div class="team-container">
      <div class="team-content">
        <h3>SPRKY Team</h3>
        <div class="team-member">
          <%= image_tag "aaron-washburn-bw@2x.jpg", size: '200x200' %>
          <div class="clearfix"></div>
          <caption><a href="https://www.linkedin.com/in/washburnad" target="_blank">Aaron Washburn</a></caption>
        </div>
        <div class="team-member">
          <%= image_tag "john-ellison-bw@2x.jpg", size: '200x200' %>
          <div class="clearfix"></div>
          <caption><a href="http://john-ellison.com" target="_blank">John Ellison</a></caption>
        </div>
        <div class="team-member">
          <%= image_tag "hilary-sinkoff-bw@2x.jpg", size: '200x200' %>
          <div class="clearfix"></div>
          <caption><a href="https://github.com/hsinkoff" target="_blank">Hilary Sinkoff</a></caption>

        </div>
        <div class="team-member">
          <%= image_tag "michael-warren-bw@2x.jpg", size: '200x200' %>
          <div class="clearfix"></div>
          <caption><a href="mailto:me@mchlwrrn.com">Michael Warren</a></caption>
        </div>
      </div>
    </div>
  </section>
</article>